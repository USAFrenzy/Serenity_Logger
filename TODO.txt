######################
# RotatingTarget.cpp #
######################
- Test the other constructors to make sure they work as intended; I've only been messing around with the one.
- SetRotationSetting():
  * Rework function to take after the background flushing thread model
    * This way, no one has to explicitly wait for a new message to be logged before deciding whether the file should be rotated. Instead, after
    * some sort of elapsed poll interval, the thread could check if the condition is met and rotate the file irregardless of whether a message 
    * needs to be logged or not - this way, it's consistent with what's expected for a collection of logs. 
  * Polling is one idea; the other is somehow setting up a condition variable, but, I'm unsure of how to achieve this without some form of polling anyways. 
    So, for now anyways, I think a polling model will suffice.
  * EDIT: Initial Approach was a dud and failed miserably -> this may not be the approach to take
- ShouldRotate():
  - Needs more testing. File size and hourly modes definitely work, daily mode seems to work, and the weekly and monthly modes are untested.
  - Should rework to keep logic for each switch case more consistent and less error prone.

##################
# FileTarget.cpp #
##################
- Test the other constructors to make sure they work as intended; I've only been messing around with the one.

###############################
# For Both File Based Targets #
###############################
- Try to wrap the atomics into function calls in order to simplify in-function calls and reduce risk of incorrectly setting/loading variables
- Expand on the BackgroundThread struct from Common.h and implement in these classes.

##########################
# ColorConsoleTarget.cpp #
##########################
- Rename class to something more consistent such as ConsoleTarget; since both color codes and default output is supported.
- Test the other constructors to make sure they work as intended; I've only been messing around with the one.
- IsValidHandle():
  * Needs more testing to determine it does what it's supposed to do in a reliable manner.
- IsTerminalType():
  * As with IsValidHandle(), needs more testing.
- PrintMessage():
  * The goal is to be pipe-aware and switch up the method of logging based on whether the output is being redirected or 
  * output to the terminal, however, current functionality is assumed and hasn't been tested - needs more testing.
- SetLocale():
  * Rework to be less clunky and more stream-lined. Need to decide if I should group the w* variants or separate them.


###########################################################################################################################################################
#     More to come as I look through what's been implemented, what can be simplified or expanded on, and what needs fixing, restructuring, or removal     #
###########################################################################################################################################################
- In general, check out C++ 20's chrono additions in regards to calendar dates and times. After watching the Oct 2022 CppCon video on it, I believe I 
  can move away from std::tm implementation in favor of this. I initially dabbled in it when first starting this project, but some support with <format> 
  wasn't fully implemented yet. If it's fully supported now, I would love to move in that direction. I want to keep this project as close as possible to 
  pure C++ constructs as possible without intermingling C if able to. This idea would translate into how the caching of variables in Message_Time and how 
  the formatting in Message_Formatter class is handled and would have to be just as efficient and fast, if not better, than the current implementation.
 
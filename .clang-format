---
##############################################################
#                   Formatting Options                       #
#  https://clang.llvm.org/docs/ClangFormatStyleOptions.html  #
##############################################################

########## The extra indent or outdent of access modifiers ##########
AccessModifierOffset: -2
########## If true, horizontally aligns arguments after an open bracket ##########
AlignAfterOpenBracket: true
########## If true, aligns consecutive assignments ##########
# int aaaa = 12;
# int b    = 23;
# int ccc  = 23;
AlignConsecutiveAssignments: true
########## If true, aligns consecutive declarations. ##########
# Avoiding This One As I Personally Like Having Vars Near Types
# Like The Bitfield And Assignment Fields
AlignConsecutiveDeclarations: false
########## If true, aligns consecutive bitfield members ##########
# int aaaa : 1;
# int b    : 12;
# int ccc  : 8;
AlignConsecutiveBitFields: true
########## If true, aligns consecutive C/C++ preprocessor macros ##########
# #define SHORT_NAME       42
# #define LONGER_NAME      0x007f
# #define EVEN_LONGER_NAME (2)
# #define foo(x)           (x * x)
# #define bar(y, z)        (y + z)
AlignConsecutiveMacros: true
##########  Align escaped newlines in the right-most column ##########
# #define A                                                        \
#  int aaaa;                                                       \
#  int b;                                                          \
#  int dddddddddd;
AlignEscapedNewlines: Right
########## Horizontally align operands of binary and ternary expressions ##########
# int aaa = bbbbbbbbbbbbbbb +
#           ccccccccccccccc;
AlignOperands: Align
########## If true, aligns trailing comments ##########
# true:                                   false:
# int a;     // My comment a      vs.     int a; // My comment a
# int b = 2; // comment  b                int b = 2; // comment about b
AlignTrailingComments: true
########## Don't Clump Arguments On One Line ##########
# void myFunction(int a,
#                 int b,
#                 int c);
AllowAllArgumentsOnNextLine: false
########## allow putting all member initializers onto the next line ##########
# true:
# MyClass::MyClass() :
#    member0(0), member1(2) {}
AllowAllConstructorInitializersOnNextLine: true
########## allow putting all parameters of a function declaration onto the next line ##########
# false:
# void myFunction(int a,
#                 int b,
#                 int c);
AllowAllParametersOfDeclarationOnNextLine: false
########## Always merge short blocks into a single line ##########
# while (true) {}
# while (true) { continue; }
AllowShortBlocksOnASingleLine: Empty
########## If true, short case labels will be contracted to a single line ##########
# true:                                   false:
# switch (a) {                    vs.     switch (a) {
# case 1: x = 1; break;                   case 1:
# case 2: return;                           x = 1;
# }                                         break;
#                                         case 2:
#                                           return;
#                                         }
AllowShortCaseLabelsOnASingleLine: true
########## Allow short enums on a single line ##########
# true:
# enum { A, B } myEnum;
AllowShortEnumsOnASingleLine: true
########## Only merge empty functions ##########
# void f() {}
# void f2() {
#   bar2();
# }
AllowShortFunctionsOnASingleLine: Empty
########## put short ifs on the same line only if  ##########
##########  the else is not a compound statement   ##########
# if (a) return;
# else
#   return;
AllowShortIfStatementsOnASingleLine: WithoutElse
########## Merge lambda into a single line if argument of a function ##########
# auto lambda = [](int a) {
#     return a;
# };
# sort(a.begin(), a.end(), ()[] { return x < y; })
AllowShortLambdasOnASingleLine: Inline
##########  If true, while (true) continue; can be put on a single line ##########
AllowShortLoopsOnASingleLine: true
########## Always break after the return type of function definitions ##########
# class A {
#   int
#   f() {
#     return 0;
#   };
# };
# int f();
# int
# f() {
#   return 1;
# }
AlwaysBreakAfterReturnType: None
########## If true, always break before multiline string literals ##########
# true:                                  false:
# aaaa =                         vs.     aaaa = "bbbb"
#     "bbbb"                                    "cccc";
#     "cccc";
AlwaysBreakBeforeMultilineStrings: false
########## Force break after template declaration only when ##########
########## the following declaration spans multiple lines.  ##########
# template <typename T> T foo() {
# }
# template <typename T>
# T foo(int aaaaaaaaaaaaaaaaaaaaa,
#       int bbbbbbbbbbbbbbbbbbbbb) {
# }
AlwaysBreakTemplateDeclarations: MultiLine
########## A vector of strings that should be interpreted   ##########
########## as attributes/qualifiers instead of identifiers. ##########
# x = (char *__capability)&y;
#   int function(void) __ununsed;
#     void only_writes_to_buffer(char *__output buffer);
# In the .clang-format configuration file, this can be configured like:
#      AttributeMacros: ['__capability', '__output', '__ununsed']
# AttributeMacros: "" # Empty For Now, Totally Clueless On This Field ATM

########## If false, a function call’s arguments will either   ###########
########## be all on the same line or will have one line each. ###########
# false:
# void f() {
#  f(aaaaaaaaaaaaaaaaaaaa,
#    aaaaaaaaaaaaaaaaaaaa,
#    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa);
# }
BinPackArguments: false
########## If false, a function declaration’s or function definition’s parameters ##########
##########      will either all be on the same line or will have one line each    ##########
# false:
# void f(int aaaaaaaaaaaaaaaaaaaa,
#        int aaaaaaaaaaaaaaaaaaaa,
#        int aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa) {}
BinPackParameters: false
########## Add space after the : only ##########
# unsigned bf: 2;
# BitFieldColonSpacing: After
########## Control of individual brace wrapping cases If custom defined ##########
BreakBeforeBraces: Custom
BraceWrapping:
  AfterCaseLabel: true
  AfterClass: true
  AfterControlStatement: MultiLine
  AfterEnum: false
  AfterFunction: true
  AfterNamespace: false
  AfterObjCDeclaration: false
  AfterStruct: true
  AfterUnion: false
  AfterExternBlock: false
  BeforeCatch: false
  BeforeElse: false
  BeforeLambdaBody: false
  BeforeWhile: false
  IndentBraces: false
  # Due To Above Choices, Stylistically Looks Better This Way
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: false
########## Break after each annotation on a field in Java files ##########
# false:
# @Partial @Mock DataLoad loader;
BreakAfterJavaFieldAnnotations: false
########## Break after operators ##########
# bool value = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +
#                      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ==
#                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa &&
#              aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa >
#                  ccccccccccccccccccccccccccccccccccccccccc;
BreakBeforeBinaryOperators: None
########## If true, ternary operators will be placed after line breaks ##########
# true:
# veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongDescription
#    : firstValue
#     : SecondValueVeryVeryVeryVeryLong;
BreakBeforeTernaryOperators: true
########## Break constructor initializers before the colon and after the commas ##########
# Constructor()
#     : initializer1(),
#       initializer2()
BreakConstructorInitializers: BeforeColon
########## Break inheritance list after the colon and commas ##########
# class Foo :
#    Base1,
#    Base2
# {};
BreakInheritanceList: AfterColon
########## Allow breaking string literals when formatting ##########
# true:
# const char* x = "veryVeryVeryVeryVeryVe"
#                 "ryVeryVeryVeryVeryVery"
#                 "VeryLongString";
BreakStringLiterals: true
ColumnLimit: 115
########## A regular expression that describes comments with special meaning ##########
CommentPragmas: "^ IWYU pragma:"
########## If false, each namespace is declared on a new line ##########
# NOTE: Will Be Coupled With Custom Breaking And Indenting Rules Earlier
# false:                                   With Earlier Choices:
# namespace Foo {                             namespace Foo {
# namespace Bar {                                 namespace Bar {}
# }                                           }
# }
CompactNamespaces: false
########## If the constructor initializers don’t fit on ##########
########## a line, put each initializer on its own line ##########
# true:
# SomeClass::Constructor()
#     : aaaa(aaaaaa), aaaaaa(aaaaaa), aaaaaaaa(aaaaaaaaaaaaaaaa) {
#   return 0;
# }
ConstructorInitializerAllOnOneLineOrOnePerLine: true
##########     The number of characters to use for indentation of     ##########
########## constructor initializer lists as well as inheritance lists ##########
ConstructorInitializerIndentWidth: 2
########## Indent width for line continuations ##########
ContinuationIndentWidth: 2
########## If true, format braced lists as best suited for C++11 braced lists ##########
# true:                                  false:
# vector<int> x{1, 2, 3, 4};     vs.     vector<int> x{ 1, 2, 3, 4 };
# vector<T> x{{}, {}, {}, {}};           vector<T> x{ {}, {}, {}, {} };
# f(MyMap[{composite, key}]);            f(MyMap[{ composite, key }]);
# new int[3]{1, 2, 3};                   new int[3]{ 1, 2, 3 };
Cpp11BracedListStyle: true
########## Analyze the formatted file for the most used line ending (\r\n or \n) ##########
DeriveLineEnding: true
########## Analyze the formatted file for the most common alignment of & and *. Pointer   ##########
##########    and reference alignment styles are going to be updated according to the     ##########
########## preferences found in the file. PointerAlignment is then used only as fallback. ##########
DerivePointerAlignment: true
########## Disables formatting completely ##########
DisableFormat: false
########## If true, clang-format adds missing namespace ##########
########## end comments and fixes invalid existing ones ##########
# true:                                  false:
# namespace a {                  vs.     namespace a {
# foo();                                 foo();
# } // namespace a                       }
FixNamespaceComments: true
########## A vector of macros that should be interpreted ###########
########## as foreach loops instead of as function calls ###########
# These are expected to be macros of the form:
# FOREACH(<variable-declaration>, ...)
#   <loop-body>
ForEachMacros: ["foreach", "Q_FOREACH", "BOOST_FOREACH", "FOREACH"]
########## Merge multiple #include blocks together and sort as one ##########
##########    Then split into groups based on category priority    ##########
IncludeBlocks: Regroup
##########   Regular expressions denoting the different    ##########
########## #include categories used for ordering #includes ##########
IncludeCategories:
  - Priority: 2
    Regex: ^"(llvm|llvm-c|clang|clang-c)/
  - Priority: 3
    Regex: ^(<|"(gtest|gmock|isl|json)/)
  - Priority: 1
    Regex: .*
    ########  Specify a regular expression of suffixes that  ##########
    ######## are allowed in the file-to-main-include mapping ##########
IncludeIsMainRegex: (Test)?$
##########  Specify a regular expression for files being formatted that are     ##########
########## allowed to be considered “main” in the file-to-main-include mapping. ##########
IncludeIsMainSourceRegex: "" # Leaving Blank For Now
########## Indent case labels one level from the switch label ##########
# false:                                 true:
# switch (fool) {                vs.     switch (fool) {
# case 1: {                              case 1:
#   bar();                                 {
# } break;                                   bar();
# default: {                               }
#   plop();                                break;
# }                                      default:
# }                                        {
#                                            plop();
#                                          }
#                                        }
IndentCaseBlocks: true
########## Indent case labels one level from the switch statement ##########
# false:                                 true:
# switch (fool) {                vs.     switch (fool) {
# case 1:                                  case 1:
#  bar();                                   bar();
#   break;                                   break;
# default:                                 default:
#   plop();                                  plop();
# }                                      }
IndentCaseLabels: true
########## Indents extern blocks ##########
# extern "C" {
#   void foo();
# }
IndentExternBlock: Indent
########## Indent goto labels. When false, goto labels are flushed left ##########
# true:                                  false:
# int f() {                      vs.     int f() {
#   if (foo()) {                           if (foo()) {
#   label1:                              label1:
#     bar();                                 bar();
#   }                                      }
# label2:                                label2:
#   return 1;                              return 1;
# }                                      }
IndentGotoLabels: true
########## Indents directives before the hash ##########
# #if FOO
#   #if BAR
#     #include <foo>
#   #endif
# #endif
IndentPPDirectives: BeforeHash
########## The number of columns to use for indentation ##########
IndentWidth: 8
########## Indent if a function definition or declaration is wrapped after the type ##########
# true:
# LoooooooooooooooooooooooooooooooooooooooongReturnType
#     LoooooooooooooooooooooooooooooooongFunctionDeclaration();
# false:
# LoooooooooooooooooooooooooooooooooooooooongReturnType
# LoooooooooooooooooooooooooooooooongFunctionDeclaration();
IndentWrappedFunctionNames: true
KeepEmptyLinesAtTheStartOfBlocks: false
Language: Cpp
########## A regular expression matching macros that start and end a block #########
MacroBlockBegin: ^REDEMPTION_.*_BEGIN|\RD_.*_BEGIN|\DEBUG_.*_BEGIN|\RD_TEST_.*_BEGIN
MacroBlockEnd: ^REDEMPTION_.*_END|\RD_.*_END|\DEBUG_.*_END|\RD_TEST_.*_END
MaxEmptyLinesToKeep: 2
NamespaceIndentation: All
########## A vector of macros which are used to open namespace blocks ##########
#  These are expected to be macros of the form:
# NAMESPACE(<namespace-name>, ...) {
#   <namespace-content>
# }
# NamespaceMacros: RD_TESTS_.*

PointerAlignment: Right
########## Defines hints for detecting supported ##########
########## languages code blocks in raw strings  ##########
RawStringFormats:
  - Language: Cpp
    Delimiters:
      - "cc"
      - "cpp"
    BasedOnStyle: llvm
    CanonicalDelimiter: "cc"

ReflowComments: true

SortIncludes: false
SortUsingDeclarations: true

SpaceAfterCStyleCast: true
# SpaceAfterLogialNot: true
SpaceAfterTemplateKeyword: true
# SpaceAroundPointerQualifiers: true
SpaceBeforeAssignmentOperators: true
SpaceBeforeCpp11BracedList: true
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: Never
SpaceBeforeRangeBasedForLoopColon: true
SpaceBeforeSquareBrackets: true
SpaceInEmptyBlock: true
SpaceInEmptyParentheses: true
SpacesBeforeTrailingComments: 1
SpacesInAngles: false
SpacesInCStyleCastParentheses: true
SpacesInContainerLiterals: true
SpacesInParentheses: false
SpacesInSquareBrackets: false

Standard: c++20

StatementMacros: ["DEPRACATED", "RD_UNUSED", "TODO", "NOTE"]

UseTab: ForContinuationAndIndentation
TabWidth: 8

PenaltyBreakAssignment: 15
PenaltyBreakBeforeFirstCallParameter: 35
PenaltyBreakComment: 10
PenaltyBreakFirstLessLess: 0
PenaltyBreakString: 15
PenaltyBreakTemplateDeclaration: 65
PenaltyExcessCharacter: 85
PenaltyReturnTypeOnItsOwnLine: 5
